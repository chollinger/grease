language: python

python:
  - "2.7"
  - "3.3"
  - "3.4"
  - "3.5"
  - "3.6"
  - "nightly"

os:
  - linux

dist:
  - trusty

sudo:
  - required

env:
  - DB=postgres GREASE_TEST_DSN=Driver={PostgreSQL UNICODE};Server=localhost;Database=travis_test;UID=postgres;
  - DB=mysql GREASE_TEST_DSN=Driver={MySQL ODBC 5.3 Driver};Sever=localhost;Database=travis_test;UID=travis;

matrix:
  include:
# Still Borken
#    - os: osx
#      sudo: required
#      osx_image: xcode9.1
#      rvm: 2.3
#      python: "2.7"
#      env:
##      Literally taken from the travis folks https://github.com/travis-ci/travis-ci/issues/8552
#        - HOMEBREW_DEVELOPER="Not really, but let's pretend I am until this travis bug gets fixed, ok?"
#      before_install:
#        - rvm install "ruby-2.3.4"
#        - export HOMEBREW_RUBY_PATH="/Users/travis/.rvm/rubies/ruby-2.3.4/bin/ruby"
#        - rvm use 2.3
    - os: osx
      osx_image: xcode9.1
      rvm: 2.3
      python: "nightly"
      env:
#      Literally taken from the travis folks https://github.com/travis-ci/travis-ci/issues/8552
        - HOMEBREW_DEVELOPER="Not really, but let's pretend I am until this travis bug gets fixed, ok?"
      before_install:
        - rvm install "ruby-2.3.4"
        - export HOMEBREW_RUBY_PATH="/Users/travis/.rvm/rubies/ruby-2.3.4/bin/ruby"
        - rvm use 2.3

services:
  - mongodb
  - postgresql
  - mysql

before_script:
  - pip install pymongo requests psutil elasticsearch pyodbc
  - sudo mkdir /opt/grease/
  - sudo chmod 777 /opt/grease/
  - if [ $TRAVIS_OS_NAME = linux ]; then sudo apt-get install unixodbc; fi
  - if [ $TRAVIS_OS_NAME = linux ] && [ $DB = postgres ]; then sudo apt-get install odbc-postgresql; fi
  - if [ $TRAVIS_OS_NAME = linux ] && [ $DB = mysql ]; then wget https://cdn.mysql.com//Downloads/Connector-ODBC/5.3/mysql-connector-odbc-5.3.9-linux-ubuntu14.04-x86-64bit.tar.gz; fi
  - if [ $TRAVIS_OS_NAME = linux ] && [ $DB = mysql ]; then tar xvfz mysql-connector-odbc-5.3.9-linux-ubuntu14.04-x86-64bit.tar.gz; fi
  - if [ $TRAVIS_OS_NAME = linux ] && [ $DB = mysql ]; then sudo cp mysql-connector-odbc-5.3.9-linux-ubuntu14.04-x86-64bit/bin/* /usr/local/bin; fi
  - if [ $TRAVIS_OS_NAME = linux ] && [ $DB = mysql ]; then sudo cp mysql-connector-odbc-5.3.9-linux-ubuntu14.04-x86-64bit/lib/* /usr/local/lib; fi
  - if [ $TRAVIS_OS_NAME = linux ] && [ $DB = mysql ]; then /usr/local/bin/myodbc-installer -a -d -n "MySQL ODBC 5.3 Driver" -t "Driver=/usr/local/lib/libmyodbc5w.so"; fi
  - if [ $TRAVIS_OS_NAME = osx ]; then brew install unixodbc; fi
  - if [ $TRAVIS_OS_NAME = osx ]; then brew install mongo; fi
  - if [ $TRAVIS_OS_NAME = osx ]; then brew services start mongodb; fi
  - if [ $TRAVIS_OS_NAME = osx ]; then rm -rf /usr/local/var/postgres; fi
  - if [ $TRAVIS_OS_NAME = osx ]; then initdb /usr/local/var/postgres; fi
  - if [ $TRAVIS_OS_NAME = osx ]; then pg_ctl -D /usr/local/var/postgres start; fi
  - if [ $TRAVIS_OS_NAME = osx ]; then createuser -s postgres; fi
  - if [ $TRAVIS_OS_NAME = osx ] && [ $DB = postgres ]; then brew install psqlodbc; fi
  - if [ $TRAVIS_OS_NAME = osx ] && [ $DB = mysql ]; then wget https://cdn.mysql.com//Downloads/Connector-ODBC/5.3/mysql-connector-odbc-5.3.9-macos10.12-x86-64bit.tar.gz; fi
  - if [ $TRAVIS_OS_NAME = osx ] && [ $DB = mysql ]; then tar xvfz mysql-connector-odbc-5.3.9-macos10.12-x86-64bit.tar.gz; fi
  - if [ $TRAVIS_OS_NAME = osx ] && [ $DB = mysql ]; then sudo cp mysql-connector-odbc-5.3.9-macos10.12-x86-64bit/bin/* /usr/local/bin; fi
  - if [ $TRAVIS_OS_NAME = osx ] && [ $DB = mysql ]; then sudo cp mysql-connector-odbc-5.3.9-macos10.12-x86-64bit/lib/* /usr/local/lib; fi
  - if [ $TRAVIS_OS_NAME = osx ] && [ $DB = mysql ]; then /usr/local/bin/myodbc-installer -a -d -n "MySQL ODBC 5.3 Driver" -t "Driver=/usr/local/lib/libmyodbc5w.so"; fi
  - if [ $DB = postgres ]; then psql -c 'create database travis_test;' -U postgres; fi
  - if [ $DB = mysql ]; then mysql -e 'CREATE DATABASE IF NOT EXISTS travis_test;'; fi

install:
  - python setup.py install
  
script:
  - source ~/.bashrc
  - python setup.py test
# Run twice to ensure state management is successful
  - python setup.py test
  - grease bridge register --foreground
  - grease help
  - grease daemon run --loop:5 --foreground
  - grease scan --loop:5 --foreground
  - grease detect --loop:5 --foreground
  - grease schedule --loop:5 --foreground
  - grease monitor --loop:5 --foreground
  - grease bridge assign --prototype:scan
  - grease bridge assign --prototype:detect
  - grease bridge assign --prototype:schedule
  - grease bridge info --jobs --pJobs
  - grease bridge unassign --prototype:scan
  - grease bridge unassign --prototype:detect
  - grease bridge unassign --prototype:schedule
  - grease bridge cull

deploy:
  on:
    branch: master
  provider: pypi
  user: $PYPI_USER
  password: 
    secure: $PYPI_PASSWORD
